generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int               @id @default(autoincrement())
  username            String
  global_name         String?
  joined_at           DateTime?
  update_at           DateTime?         @updatedAt
  last_active         DateTime?
  create_at           DateTime?         @default(now())
  bot                 Boolean
  email               String?
  status              Int
  platform_created_at DateTime?
  platform_id         String            @unique
  channelId           Int?
  audio_event         AudioEvent[]
  message             Message[]
  message_reaction    MessageReaction[]
  Channel             Channel?          @relation(fields: [channelId], references: [id])
  user_channel        UserChannel[]
  user_event          userEvent[]
  user_role           UserRole[]

  @@index([channelId], map: "user_channelId_fkey")
  @@map("user")
}

model Role {
  id                  Int        @id @default(autoincrement())
  name                String
  created_at          DateTime   @default(now())
  platform_created_at DateTime
  platform_id         String     @unique
  user_role           UserRole[]

  @@map("role")
}

model UserRole {
  user_id String
  roleId  String
  role    Role   @relation(fields: [roleId], references: [platform_id])
  user    User   @relation(fields: [user_id], references: [platform_id])

  @@id([user_id, roleId])
  @@index([roleId], map: "user_role_roleId_fkey")
  @@map("user_role")
}

model AudioEvent {
  id          Int         @id @default(autoincrement())
  channel_id  String
  creator_id  String
  name        String
  description String?
  status_id   String
  start_at    DateTime
  end_at      DateTime
  user_count  Int
  image       String?
  created_at  DateTime    @default(now())
  platform_id String      @unique
  channel     Channel     @relation(fields: [channel_id], references: [platform_id])
  creator     User        @relation(fields: [creator_id], references: [platform_id])
  status      EventStatus @relation(fields: [status_id], references: [platform_id])
  user_event  userEvent[]

  @@index([channel_id], map: "audio_event_channel_id_fkey")
  @@index([creator_id], map: "audio_event_creator_id_fkey")
  @@index([status_id], map: "audio_event_status_id_fkey")
  @@map("audio_event")
}

model EventStatus {
  id          Int          @id @default(autoincrement())
  name        String
  created_at  DateTime     @default(now())
  platform_id String       @unique
  event       AudioEvent[]

  @@map("event_status")
}

model userEvent {
  event_id String
  user_id  String
  event    AudioEvent @relation(fields: [event_id], references: [platform_id])
  user     User       @relation(fields: [user_id], references: [platform_id])

  @@id([user_id, event_id])
  @@index([event_id], map: "user_event_event_id_fkey")
  @@map("user_event")
}

model Message {
  id                  Int               @id @default(autoincrement())
  channel_id          String
  user_id             String
  created_at          DateTime          @default(now())
  is_deleted          Boolean           @default(false)
  platform_created_at DateTime
  platform_id         String            @unique
  channel             Channel           @relation(fields: [channel_id], references: [platform_id])
  user                User              @relation(fields: [user_id], references: [platform_id])
  message_reaction    MessageReaction[]

  @@index([channel_id], map: "message_channel_id_fkey")
  @@index([user_id], map: "message_user_id_fkey")
  @@map("message")
}

model Channel {
  id               Int               @id @default(autoincrement())
  name             String
  url              String
  created_at       DateTime          @default(now())
  platform_id      String            @unique
  audio_event      AudioEvent[]
  message          Message[]
  message_reaction MessageReaction[]
  user             User[]
  user_channel     UserChannel[]

  @@map("channel")
}

model MessageReaction {
  user_id    String
  message_id String
  channel_id String
  id         Int     @id @default(autoincrement())
  channel    Channel @relation(fields: [channel_id], references: [platform_id])
  message    Message @relation(fields: [message_id], references: [platform_id])
  user       User    @relation(fields: [user_id], references: [platform_id])

  @@unique([user_id, message_id])
  @@index([channel_id], map: "message_reaction_channel_id_fkey")
  @@index([message_id], map: "message_reaction_message_id_fkey")
  @@map("message_reaction")
}

model UserChannel {
  user_id    String
  channel_id String
  channel    Channel @relation(fields: [channel_id], references: [platform_id])
  user       User    @relation(fields: [user_id], references: [platform_id])

  @@id([user_id, channel_id])
  @@index([channel_id], map: "user_channel_channel_id_fkey")
  @@map("user_channel")
}
