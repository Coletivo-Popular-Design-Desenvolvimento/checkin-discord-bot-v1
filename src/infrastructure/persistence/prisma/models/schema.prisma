// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int               @id @default(autoincrement())
  discord_id       String            @unique
  username         String
  global_name      String?
  joined_at        Int?
  created_at       Int?
  update_at        Int?
  last_active      Int?
  bot              Boolean
  email            String?
  status           Int
  user_role        UserRole[]
  user_event       userEvent[]
  message          Message[]
  message_reaction MessageReaction[]
  audio_event      AudioEvent[]

  @@map("user")
}

model Role {
  id                Int        @id @default(autoincrement())
  discord_id        String
  name              String
  created_timestamp Int
  user_role         UserRole[]

  @@map("role")
}

model UserRole {
  user    User @relation(fields: [user_id], references: [id])
  user_id Int
  role    Role @relation(fields: [roleId], references: [id])
  roleId  Int

  @@id([user_id, roleId])
  @@map("user_role")
}

model AudioEvent {
  id              Int         @id @default(autoincrement())
  channel_id      Int
  channel         Channel     @relation(fields: [channel_id], references: [id])
  creator_id      Int
  creator         User        @relation(fields: [creator_id], references: [id])
  name            String
  description     String?
  status          EventStatus @relation(fields: [status_id], references: [id])
  status_id       Int
  start_timestamp Int
  end_timestamp   Int
  user_count      Int
  user_event      userEvent[]
  image           String?

  @@map("audio_event")
}

model EventStatus {
  id    Int          @id @default(autoincrement())
  name  String
  event AudioEvent[]

  @@map("event_status")
}

model userEvent {
  event    AudioEvent @relation(fields: [event_id], references: [id])
  event_id Int
  user     User       @relation(fields: [user_id], references: [id])
  user_id  Int

  @@id([user_id, event_id])
  @@map("user_event")
}

model Message {
  id                Int               @id @default(autoincrement())
  discord_id        String
  channel           Channel           @relation(fields: [channel_id], references: [id])
  channel_id        Int
  user_id           Int
  user              User              @relation(fields: [user_id], references: [id])
  created_timestamp Int
  message_reaction  MessageReaction[]

  @@map("message")
}

model Channel {
  id               Int               @id @default(autoincrement())
  discord_id       String
  name             String
  url              String
  message          Message[]
  audio_event      AudioEvent[]
  message_reaction MessageReaction[]

  @@map("channel")
}

model MessageReaction {
  user       User    @relation(fields: [user_id], references: [id])
  user_id    Int
  message    Message @relation(fields: [message_id], references: [id])
  message_id Int
  channel    Channel @relation(fields: [channel_id], references: [id])
  channel_id Int

  @@id([user_id, message_id])
  @@map("message_reaction")
}
